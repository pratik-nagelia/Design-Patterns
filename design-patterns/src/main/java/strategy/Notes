Design Principle : Identify the aspects of your application that vary and separate them from what stays the same.

In other words, if you’ve got some aspect of your code that is changing, say with every new requirement, then you know you’ve got a behavior that needs to be pulled out and separated from all the stuff that doesn’t change.

Take the parts that vary and encapsulate them, so that later you can alter or extend the parts that vary without affecting those that don’t.

Design Principle : Program to an interface, not an implementation.

Design Principle : Favor composition over inheritance. HAS-A can be better than IS-A.

The Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.
